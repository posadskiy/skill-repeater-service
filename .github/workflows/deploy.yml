name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (optional, defaults to latest tag)'
        required: false
        type: string

env:
  JAVA_VERSION: '21'
  MAVEN_VERSION: '3.9.9'
  DOCKER_REGISTRY: 'gcr.io'
  IMAGE_NAME: 'skill-repeater-service'
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  # Quality Assurance
  quality-assurance:
    name: Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    # Quick Quality Checks
    - name: Quick Quality Checks
      run: |
        echo "üîç Running quick quality checks..."
        #mvn clean compile test \
        #  -Dmaven.test.failure.ignore=false \
        #  -Djacoco.skip=false
        
        #mvn spotless:check \
        #  -Dspotless.check.skip=false
        
    # Upload Quality Reports
    - name: Upload Quality Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports-${{ github.run_number }}
        path: |
          **/target/dependency-check-report.json
        retention-days: 30

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality-assurance
    if: needs.quality-assurance.result == 'success'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      trigger_type: ${{ steps.version.outputs.trigger_type }}
      image-tag: ${{ steps.build.outputs.image-tag }}
      image-tag-date: ${{ steps.build.outputs.image-tag-date }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Calculate Version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          TAG="v$VERSION"
          TRIGGER_TYPE="tag"
        else
          # Manual dispatch - use provided version or latest tag
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Get latest tag
            VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
          fi
          TAG="v$VERSION"
          TRIGGER_TYPE="manual"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "trigger_type=$TRIGGER_TYPE" >> $GITHUB_OUTPUT
        echo "üì¶ Version: $VERSION"
        echo "üè∑Ô∏è Tag: $TAG"
        echo "üîß Trigger: $TRIGGER_TYPE"
        
    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker gcr.io --quiet
        
    - name: Build and Push to GCR
      id: build
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOYMENT_GITHUB_TOKEN }}
        GITHUB_USERNAME: posadskiy
      run: |
        echo "üèóÔ∏è Building application..."
        mvn clean package -DskipTests
        
        # Create GCR image tags
        TAG_DATE=$(date +%Y%m%d%H%M%S)
        REGISTRY="${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_ID }}"
        IMAGE_TAG="$REGISTRY/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        IMAGE_TAG_DATE="$REGISTRY/${{ env.IMAGE_NAME }}:$TAG_DATE"
        
        echo "üê≥ Building Docker image..."
        docker buildx build --platform linux/amd64 \
          --build-arg GITHUB_TOKEN=${{ secrets.DEPLOYMENT_GITHUB_TOKEN }} \
          --build-arg GITHUB_USERNAME=posadskiy \
          -f Dockerfile.prod \
          -t $IMAGE_TAG \
          -t $IMAGE_TAG_DATE \
          . --push
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image-tag-date=$IMAGE_TAG_DATE" >> $GITHUB_OUTPUT
        echo "üê≥ Image tags: $IMAGE_TAG, $IMAGE_TAG_DATE"
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
        path: |
          **/target/*.jar
          **/target/classes/
        retention-days: 30
        
    - name: Create Build Summary
      run: |
        echo "üìã Build Summary" > build-summary.txt
        echo "Version: ${{ steps.version.outputs.version }}" >> build-summary.txt
        echo "Image Tag: ${{ steps.build.outputs.image-tag }}" >> build-summary.txt
        echo "Image Tag Date: ${{ steps.build.outputs.image-tag-date }}" >> build-summary.txt
        echo "Registry: ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_ID }}" >> build-summary.txt
        echo "Build Date: $(date)" >> build-summary.txt
        
    - name: Upload Build Summary
      uses: actions/upload-artifact@v4
      with:
        name: build-summary-${{ github.run_number }}
        path: build-summary.txt
        retention-days: 30

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-assurance, build]
    if: needs.quality-assurance.result == 'success' && needs.build.result == 'success'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
        path: artifacts/
        
    - name: Download Build Summary
      uses: actions/download-artifact@v4
      with:
        name: build-summary-${{ github.run_number }}
        path: ./
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker gcr.io --quiet
        
    - name: Get GKE Credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
        location: ${{ secrets.GKE_REGION }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Deploy to Production Environment
      run: |
        echo "üîê Deploying skill-repeater-service to production environment..."
        
        # Configuration
        PROJECT_ID="${{ env.PROJECT_ID }}"
        CLUSTER_NAME="${{ secrets.GKE_CLUSTER_NAME }}"
        NAMESPACE="${{ secrets.K8S_NAMESPACE || 'skill-repeater' }}"
        VERSION="${{ needs.build.outputs.version }}"
        IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
        
        echo "üìã Production Deployment Plan:"
        echo "- Environment: Production"
        echo "- Application: Skill Repeater Service"
        echo "- Version: $VERSION"
        echo "- Image: $IMAGE_TAG"
        echo "- Project ID: $PROJECT_ID"
        echo "- Cluster: $CLUSTER_NAME"
        echo "- Namespace: $NAMESPACE"
        
        # Check if cluster exists and get credentials
        echo "üîç Checking cluster access..."
        if ! gcloud container clusters describe $CLUSTER_NAME --zone=${{ secrets.GKE_REGION }} > /dev/null 2>&1; then
            echo "‚ùå Cluster $CLUSTER_NAME not found in ${{ secrets.GKE_REGION }}"
            exit 1
        fi
        
        # Install gke-gcloud-auth-plugin using the official method
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        
        # Add Google Cloud repository with proper GPG key
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
        sudo apt-get update
        sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin
        
        # Get cluster credentials
        echo "üîê Getting cluster credentials..."
        gcloud container clusters get-credentials $CLUSTER_NAME --zone=${{ secrets.GKE_REGION }}
        
        # Deploy skill-repeater-service with version substitution
        echo "üîê Deploying skill-repeater-service..."
        export IMAGE_VERSION=$VERSION
        export IMAGE_TAG=$IMAGE_TAG
        export GITHUB_USERNAME="posadskiy"
        
        # Create temporary skill-repeater-service.yaml with image substitution
        envsubst < k8s/skill-repeater-service.yaml | kubectl apply -f -
        
        # Wait for skill-repeater-service to be ready
        echo "‚è≥ Waiting for skill-repeater-service to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/skill-repeater-service -n $NAMESPACE
        
        # Verify deployment
        echo "‚úÖ Verifying deployment..."
        kubectl get pods -n $NAMESPACE
        kubectl get services -n $NAMESPACE
        
        echo "‚úÖ Skill-repeater-service deployment completed successfully!"
        
    - name: Run Production Tests
      run: |
        echo "üß™ Running production tests..."
        
        NAMESPACE="${{ secrets.K8S_NAMESPACE || 'skill-repeater' }}"
        
        # Get service information
        echo "üìã Service Information:"
        kubectl get service skill-repeater-service -n $NAMESPACE
        
        # Get pod status
        echo "üìä Pod Status:"
        kubectl get pods -n $NAMESPACE -l app=skill-repeater-service
        
        # Check service endpoints
        echo "üîç Checking service endpoints..."
        kubectl get endpoints skill-repeater-service -n $NAMESPACE
        
        # Health check using the correct endpoint
        echo "üè• Running health checks..."
        echo "Testing health endpoint: https://api.posadskiy.com/skill-repeater/health"
        curl -f https://api.posadskiy.com/skill-repeater/health || echo "Health check failed"
        

        
        echo "‚úÖ Production tests completed"
        
    - name: Create Release
      if: github.event_name == 'push'  # Only create release on tag push
      env:
        GH_TOKEN: ${{ secrets.DEPLOYMENT_GITHUB_TOKEN }}
      run: |
        # Fetch all tags to ensure they're available
        git fetch --tags
        
        # Get the previous tag to determine commit range
        CURRENT_VERSION="${{ needs.build.outputs.version }}"
        
        # More robust approach to find previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | while read tag; do
        if [[ "$tag" != "v$CURRENT_VERSION" ]]; then
        echo "$tag"
        break
        fi
        done)
        
        # Use the previous tag for the commit range
        COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
        
        # Create release body header
        echo "## Skill Repeater Service Release ${{ needs.build.outputs.version }}" > release_body.md
        echo "" >> release_body.md
        echo "### üìù Changes" >> release_body.md
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
        # Get all commit messages in the range, excluding all version bump commits
        COMMITS=$(git log --pretty=format:"- %s" $COMMIT_RANGE | grep -v "^- v[0-9]" || echo "")
        if [[ -z "$COMMITS" ]]; then
        echo "No changes since previous release." >> release_body.md
        else
        echo "$COMMITS" >> release_body.md
        fi
        else
        # First release - include all commits except version bump commits
        COMMITS=$(git log --pretty=format:"- %s" | grep -v "^- v[0-9]" || echo "")
        if [[ -z "$COMMITS" ]]; then
        echo "No changes since previous release." >> release_body.md
        else
        echo "$COMMITS" >> release_body.md
        fi
        fi
        
        # Add footer to release notes
        echo "" >> release_body.md
        echo "### üì¶ Release Artifacts" >> release_body.md
        echo "- Source code tagged with version ${{ needs.build.outputs.version }}" >> release_body.md
        echo "- Maven artifacts available in GitHub Packages" >> release_body.md
        echo "" >> release_body.md
        echo "### üîß Build Instructions" >> release_body.md
        echo '```bash' >> release_body.md
        echo "mvn clean package -DskipTests" >> release_body.md
        echo "java -jar web/target/skill-repeater-service-web-*.jar" >> release_body.md
        echo '```' >> release_body.md
        echo "" >> release_body.md
        echo "### üìù Release Trigger" >> release_body.md
        if [[ "${{ needs.build.outputs.trigger_type }}" == "manual" ]]; then
        echo "This release was triggered by a manual workflow dispatch." >> release_body.md
        else
        echo "This release was triggered by a git tag push." >> release_body.md
        fi
        
        # Create release using GitHub CLI
        gh release create ${{ needs.build.outputs.tag }} \
        --title "Skill Repeater Service ${{ needs.build.outputs.version }}" \
        --notes-file release_body.md \
        --draft=false \
        --prerelease=false
        


  # Monitoring and Alerting
  monitor:
    name: Monitor Deployment
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Get GKE Credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
        location: ${{ secrets.GKE_REGION }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Monitor Application Health
      run: |
        echo "üìä Monitoring application health..."
        
        NAMESPACE="${{ secrets.K8S_NAMESPACE || 'skill-repeater' }}"
        
        # Check if kubectl is working
        echo "üîç Testing kubectl connection..."
        kubectl cluster-info || {
            echo "‚ùå kubectl connection failed"
            echo "üí° This might be due to cluster access issues or authentication problems"
            exit 1
        }
        
        # Get pod status and resource usage
        echo "üìä Pod Status and Resource Usage:"
        kubectl get pods -n $NAMESPACE -l app=skill-repeater-service || echo "No skill-repeater-service pods found"
        kubectl top pods -n $NAMESPACE -l app=skill-repeater-service || echo "Resource usage not available"
        
        # Get service status
        echo "üåê Service Status:"
        kubectl get services -n $NAMESPACE -l app=skill-repeater-service || echo "No skill-repeater-service services found"
        
        # Get deployment status
        echo "üöÄ Deployment Status:"
        kubectl get deployments -n $NAMESPACE -l app=skill-repeater-service || echo "No skill-repeater-service deployments found"
        
        # Check logs for any errors
        echo "üìù Recent Logs:"
        kubectl logs --tail=50 -n $NAMESPACE -l app=skill-repeater-service || echo "No logs available"
        
        # External health check
        echo "üè• External Health Check:"
        curl -f https://api.posadskiy.com/skill-repeater/health || echo "External health check failed"
        
        # Metrics collection from external endpoint
        echo "üìà Metrics Collection:"
        curl -s https://api.posadskiy.com/skill-repeater/actuator/metrics || echo "Metrics endpoint not accessible"
        curl -s https://api.posadskiy.com/skill-repeater/actuator/prometheus || echo "Prometheus endpoint not accessible"
        
        echo "‚úÖ Monitoring completed" 
